package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"math/big"
	"os"

	"github.com/base/validation-generator/internal/state"
	"github.com/base/validation-generator/internal/template"
	"github.com/base/validation-generator/internal/transaction"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/params"
)

var SENDER = common.HexToAddress("0x9986ccaf9E3DE0fFEF82a0f7fA3a06D5aFe07252")
var RECIPIENT = common.HexToAddress("0x6AF0674791925f767060Dd52f7fB20984E8639d8")
var VALUE = big.NewInt(0)
var DATA = common.FromHex("0x6a761202000000000000000000000000ca11bde05977b3631167028862be2a173976cac600000000000000000000000000000000000000000000000000000000000000ae482ad56cb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000008a000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000006af0674791925f767060dd52f7fb20984e8639d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000440d582f13000000000000000000000000edecf2c444559210a865a22acfc6a2a25590ab1b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000440d582f13000000000000000000000000f2fb17eab635f036da7864b8e39ef8e9a03441df0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000440d582f13000000000000000000000000e45ac81ea7f53dea5f0bd6caa0733dd5c02d3b600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000440d582f13000000000000000000000000931e24b032511d8dd029aedeb44837fac251f3d80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000440d582f130000000000000000000000000cf2f86c3338993ce10f74d6f4b095712c7efe260000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064f8dc5dd9000000000000000000000000420c8fe1ddb0593c71487445576c87c17f177179000000000000000000000000a8c40cc18581ff25c0d2605631514cca6590c5030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064f8dc5dd9000000000000000000000000420c8fe1ddb0593c71487445576c87c17f1771790000000000000000000000002fa5d8294575a8fa880a8aec008b860fb6a70e260000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064f8dc5dd9000000000000000000000000420c8fe1ddb0593c71487445576c87c17f17717900000000000000000000000079dc63ba7b5d9817a0f0840cd5373292e86735e40000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064f8dc5dd9000000000000000000000000420c8fe1ddb0593c71487445576c87c17f177179000000000000000000000000066a2b1419ccf2e1e672a03f14cc1d1146e717a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000006af0674791925f767060dd52f7fb20984e8639d8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000064f8dc5dd9000000000000000000000000420c8fe1ddb0593c71487445576c87c17f177179000000000000000000000000b04e501237d9a941b130172868201dee9b965c380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410000000000000000000000009986ccaf9e3de0ffef82a0f7fa3a06d5afe0725200000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000")

func main() {
	// Parse command line arguments
	rpcURL := flag.String("rpc", "", "RPC URL to connect to")
	outputFile := flag.String("o", "", "Output file path")
	flag.Parse()

	if *rpcURL == "" {
		fmt.Println("Error: RPC URL is required")
		os.Exit(1)
	}

	// Connect to the Ethereum node
	client, err := ethclient.Dial(*rpcURL)
	if err != nil {
		fmt.Printf("Failed to connect to the Ethereum client: %v\n", err)
		os.Exit(1)
	}

	// Get chain ID
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		fmt.Printf("Failed to get chain ID: %v\n", err)
		os.Exit(1)
	}

	// Get the latest block
	block, err := client.BlockByNumber(context.Background(), nil)
	if err != nil {
		fmt.Printf("Failed to get block: %v\n", err)
		os.Exit(1)
	}

	// Get the chain configuration based on chain ID
	var chainConfig *params.ChainConfig
	switch chainID.Int64() {
	case 1:
		chainConfig = params.MainnetChainConfig
	case 11155111:
		chainConfig = params.SepoliaChainConfig
	default:
		fmt.Printf("Unsupported chain ID: %d\n", chainID.Int64())
		os.Exit(1)
	}

	// Create a memory database for local storage
	memDB := rawdb.NewMemoryDatabase()

	// Create a caching state database
	cachingDB := state.NewCachingStateDB(client, block, memDB)

	blockContext := core.NewEVMBlockContext(
		block.Header(),
		nil,
		&common.Address{},
	)

	// Create a new EVM instance with the state database
	evm := vm.NewEVM(blockContext, vm.TxContext{}, cachingDB, chainConfig, vm.Config{})

	// Retrieve the currently suggested gas price for a new transaction.
	baseFee, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		log.Fatalf("Failed to suggest gas price: %v", err)
	}

	sender := SENDER
	recipient := RECIPIENT
	value := VALUE
	data := DATA

	msg := ethereum.CallMsg{
		From:  sender,
		To:    &recipient,
		Gas:   0x00,
		Value: value,
		Data:  data,
	}

	gas, err := client.EstimateGas(context.Background(), msg)
	if err != nil {
		log.Fatalf("Failed to estimate gas: %v", err)
	}

	// Suggest a gas tip cap (priority fee) for miner incentive.
	priorityFee, err := client.SuggestGasTipCap(context.Background())
	if err != nil {
		log.Fatalln(err)
	}

	nonce, err := client.PendingNonceAt(context.Background(), sender)
	if err != nil {
		log.Fatalf("Failed to get pending nonce: %v", err)
	}

	// Calculate the maximum gas fee cap, adding a 2 GWei margin to the base fee plus priority fee.
	increment := new(big.Int).Mul(big.NewInt(2), big.NewInt(params.GWei))
	gasFeeCap := new(big.Int).Add(baseFee, increment)
	gasFeeCap.Add(gasFeeCap, priorityFee)

	txData := types.DynamicFeeTx{
		ChainID:   chainID,
		Nonce:     nonce,
		GasTipCap: priorityFee,
		GasFeeCap: gasFeeCap,
		Gas:       gas,
		To:        msg.To,
		Value:     msg.Value,
		Data:      msg.Data,
	}

	// Create a sample transaction
	tx := types.NewTx(&txData)

	// Simulate the transaction
	diffs, err := transaction.SimulateTransaction(evm, tx, sender)
	if err != nil {
		fmt.Printf("Error simulating transaction: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Transaction simulated successfully on chain %d at block %d\n", chainID.Int64(), block.Number().Int64())

	validationFile, err := template.BuildValidationFile(chainID.String(), diffs)
	if err != nil {
		fmt.Printf("Error building validation file: %v\n", err)
		os.Exit(1)
	}

	if *outputFile != "" {
		err = os.WriteFile(*outputFile, validationFile, 0644)
		if err != nil {
			fmt.Println("Error writing file:", err)
			return
		}
	} else {
		fmt.Println(string(validationFile))
	}
}
